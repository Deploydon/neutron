// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: neutron/interchainqueries/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2254be23ba3ff3b4, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// Response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// Stores all parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2254be23ba3ff3b4, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// Request type for the Query/RegisteredQueries RPC method.
type QueryRegisteredQueriesRequest struct {
	// A list of owners of Interchain Queries. Query response will contain only Interchain Queries
	// that are owned by one of the owners in the list. If none, Interchain Queries are not filtered
	// out by the owner field.
	Owners []string `protobuf:"bytes,1,rep,name=owners,proto3" json:"owners,omitempty"`
	// IBC connection ID. Query response will contain only Interchain Queries that have the same IBC
	// connection ID parameter. If none, Interchain Queries are not filtered out by the connection ID
	// field.
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Pagination parameters for the request. Use values from previous response in the next request
	// in consecutive requests with paginated responses.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRegisteredQueriesRequest) Reset()         { *m = QueryRegisteredQueriesRequest{} }
func (m *QueryRegisteredQueriesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredQueriesRequest) ProtoMessage()    {}
func (*QueryRegisteredQueriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2254be23ba3ff3b4, []int{2}
}
func (m *QueryRegisteredQueriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredQueriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredQueriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredQueriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredQueriesRequest.Merge(m, src)
}
func (m *QueryRegisteredQueriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredQueriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredQueriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredQueriesRequest proto.InternalMessageInfo

func (m *QueryRegisteredQueriesRequest) GetOwners() []string {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *QueryRegisteredQueriesRequest) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *QueryRegisteredQueriesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Response type for the Query/RegisteredQueries RPC method.
type QueryRegisteredQueriesResponse struct {
	// A list of registered Interchain Queries.
	RegisteredQueries []RegisteredQuery `protobuf:"bytes,1,rep,name=registered_queries,json=registeredQueries,proto3" json:"registered_queries"`
	// Current page information. Use values from previous response in the next request in consecutive
	// requests with paginated responses.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRegisteredQueriesResponse) Reset()         { *m = QueryRegisteredQueriesResponse{} }
func (m *QueryRegisteredQueriesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredQueriesResponse) ProtoMessage()    {}
func (*QueryRegisteredQueriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2254be23ba3ff3b4, []int{3}
}
func (m *QueryRegisteredQueriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredQueriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredQueriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredQueriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredQueriesResponse.Merge(m, src)
}
func (m *QueryRegisteredQueriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredQueriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredQueriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredQueriesResponse proto.InternalMessageInfo

func (m *QueryRegisteredQueriesResponse) GetRegisteredQueries() []RegisteredQuery {
	if m != nil {
		return m.RegisteredQueries
	}
	return nil
}

func (m *QueryRegisteredQueriesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Request type for the Query/RegisteredQuery RPC method.
type QueryRegisteredQueryRequest struct {
	// ID of an Interchain Query.
	QueryId uint64 `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (m *QueryRegisteredQueryRequest) Reset()         { *m = QueryRegisteredQueryRequest{} }
func (m *QueryRegisteredQueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredQueryRequest) ProtoMessage()    {}
func (*QueryRegisteredQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2254be23ba3ff3b4, []int{4}
}
func (m *QueryRegisteredQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredQueryRequest.Merge(m, src)
}
func (m *QueryRegisteredQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredQueryRequest proto.InternalMessageInfo

func (m *QueryRegisteredQueryRequest) GetQueryId() uint64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

// Response type for the Query/RegisteredQuery RPC method.
type QueryRegisteredQueryResponse struct {
	// A registered Interchain Query.
	RegisteredQuery *RegisteredQuery `protobuf:"bytes,1,opt,name=registered_query,json=registeredQuery,proto3" json:"registered_query,omitempty"`
}

func (m *QueryRegisteredQueryResponse) Reset()         { *m = QueryRegisteredQueryResponse{} }
func (m *QueryRegisteredQueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredQueryResponse) ProtoMessage()    {}
func (*QueryRegisteredQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2254be23ba3ff3b4, []int{5}
}
func (m *QueryRegisteredQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredQueryResponse.Merge(m, src)
}
func (m *QueryRegisteredQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredQueryResponse proto.InternalMessageInfo

func (m *QueryRegisteredQueryResponse) GetRegisteredQuery() *RegisteredQuery {
	if m != nil {
		return m.RegisteredQuery
	}
	return nil
}

// Request type for the Query/QueryResult RPC method.
type QueryQueryResultRequest struct {
	// ID of an Interchain Query.
	QueryId uint64 `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (m *QueryQueryResultRequest) Reset()         { *m = QueryQueryResultRequest{} }
func (m *QueryQueryResultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQueryResultRequest) ProtoMessage()    {}
func (*QueryQueryResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2254be23ba3ff3b4, []int{6}
}
func (m *QueryQueryResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueryResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueryResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueryResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueryResultRequest.Merge(m, src)
}
func (m *QueryQueryResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueryResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueryResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueryResultRequest proto.InternalMessageInfo

func (m *QueryQueryResultRequest) GetQueryId() uint64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

// Response type for the Query/QueryResult RPC method.
type QueryQueryResultResponse struct {
	// The last successfully submitted result of an Interchain Query.
	Result *QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryQueryResultResponse) Reset()         { *m = QueryQueryResultResponse{} }
func (m *QueryQueryResultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQueryResultResponse) ProtoMessage()    {}
func (*QueryQueryResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2254be23ba3ff3b4, []int{7}
}
func (m *QueryQueryResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueryResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueryResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueryResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueryResultResponse.Merge(m, src)
}
func (m *QueryQueryResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueryResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueryResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueryResultResponse proto.InternalMessageInfo

func (m *QueryQueryResultResponse) GetResult() *QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// Request type for the Query/LastRemoteHeight RPC method.
type QueryLastRemoteHeightRequest struct {
	// Connection ID of an IBC connection to a remote chain. Determines the IBC client used in query
	// handling.
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (m *QueryLastRemoteHeightRequest) Reset()         { *m = QueryLastRemoteHeightRequest{} }
func (m *QueryLastRemoteHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastRemoteHeightRequest) ProtoMessage()    {}
func (*QueryLastRemoteHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2254be23ba3ff3b4, []int{8}
}
func (m *QueryLastRemoteHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastRemoteHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastRemoteHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastRemoteHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastRemoteHeightRequest.Merge(m, src)
}
func (m *QueryLastRemoteHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastRemoteHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastRemoteHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastRemoteHeightRequest proto.InternalMessageInfo

func (m *QueryLastRemoteHeightRequest) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

// Response type for the Query/LastRemoteHeight RPC method.
type QueryLastRemoteHeightResponse struct {
	// The height of the chain that the IBC client is currently on.
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// The revision of the chain that the IBC client is currently on.
	Revision uint64 `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (m *QueryLastRemoteHeightResponse) Reset()         { *m = QueryLastRemoteHeightResponse{} }
func (m *QueryLastRemoteHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastRemoteHeightResponse) ProtoMessage()    {}
func (*QueryLastRemoteHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2254be23ba3ff3b4, []int{9}
}
func (m *QueryLastRemoteHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastRemoteHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastRemoteHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastRemoteHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastRemoteHeightResponse.Merge(m, src)
}
func (m *QueryLastRemoteHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastRemoteHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastRemoteHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastRemoteHeightResponse proto.InternalMessageInfo

func (m *QueryLastRemoteHeightResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryLastRemoteHeightResponse) GetRevision() uint64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "neutron.interchainqueries.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "neutron.interchainqueries.QueryParamsResponse")
	proto.RegisterType((*QueryRegisteredQueriesRequest)(nil), "neutron.interchainqueries.QueryRegisteredQueriesRequest")
	proto.RegisterType((*QueryRegisteredQueriesResponse)(nil), "neutron.interchainqueries.QueryRegisteredQueriesResponse")
	proto.RegisterType((*QueryRegisteredQueryRequest)(nil), "neutron.interchainqueries.QueryRegisteredQueryRequest")
	proto.RegisterType((*QueryRegisteredQueryResponse)(nil), "neutron.interchainqueries.QueryRegisteredQueryResponse")
	proto.RegisterType((*QueryQueryResultRequest)(nil), "neutron.interchainqueries.QueryQueryResultRequest")
	proto.RegisterType((*QueryQueryResultResponse)(nil), "neutron.interchainqueries.QueryQueryResultResponse")
	proto.RegisterType((*QueryLastRemoteHeightRequest)(nil), "neutron.interchainqueries.QueryLastRemoteHeightRequest")
	proto.RegisterType((*QueryLastRemoteHeightResponse)(nil), "neutron.interchainqueries.QueryLastRemoteHeightResponse")
}

func init() {
	proto.RegisterFile("neutron/interchainqueries/query.proto", fileDescriptor_2254be23ba3ff3b4)
}

var fileDescriptor_2254be23ba3ff3b4 = []byte{
	// 732 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x41, 0x4f, 0x13, 0x41,
	0x14, 0xee, 0x02, 0xae, 0x30, 0x68, 0x80, 0x91, 0x60, 0x59, 0x71, 0x85, 0x25, 0x42, 0xc1, 0x74,
	0x47, 0x8a, 0x28, 0xc6, 0x44, 0x13, 0x4c, 0x54, 0x12, 0x0f, 0xb0, 0x06, 0x0f, 0x5c, 0x9a, 0x6d,
	0x3b, 0xd9, 0x6e, 0x42, 0x67, 0xca, 0xce, 0x14, 0xd9, 0xab, 0xbf, 0xc0, 0xe8, 0x5f, 0x30, 0xf1,
	0x27, 0x78, 0xf4, 0x4a, 0x3c, 0x91, 0x78, 0xf1, 0x64, 0x0c, 0xf8, 0x33, 0x3c, 0x98, 0x9d, 0x99,
	0x2d, 0xb4, 0xdb, 0x76, 0x5b, 0x4f, 0x9d, 0x79, 0x7d, 0xdf, 0x7b, 0xdf, 0xfb, 0xde, 0x7b, 0x3b,
	0xe0, 0x2e, 0xc1, 0x0d, 0x1e, 0x50, 0x82, 0x7c, 0xc2, 0x71, 0x50, 0xae, 0xba, 0x3e, 0x39, 0x6c,
	0xe0, 0xc0, 0xc7, 0x0c, 0x45, 0xbf, 0xa1, 0x5d, 0x0f, 0x28, 0xa7, 0x70, 0x56, 0xb9, 0xd9, 0x09,
	0x37, 0x63, 0xb5, 0x4c, 0x59, 0x8d, 0x32, 0x54, 0x72, 0x19, 0x96, 0x18, 0x74, 0xb4, 0x56, 0xc2,
	0xdc, 0x5d, 0x43, 0x75, 0xd7, 0xf3, 0x89, 0xcb, 0x7d, 0x4a, 0x64, 0x18, 0x63, 0xda, 0xa3, 0x1e,
	0x15, 0x47, 0x14, 0x9d, 0x94, 0x75, 0xce, 0xa3, 0xd4, 0x3b, 0xc0, 0xc8, 0xad, 0xfb, 0xc8, 0x25,
	0x84, 0x72, 0x01, 0x61, 0xea, 0xdf, 0xe5, 0xee, 0x0c, 0x3d, 0x4c, 0x30, 0xf3, 0x63, 0xc7, 0xa5,
	0xee, 0x8e, 0x75, 0x37, 0x70, 0x6b, 0xb1, 0x9f, 0xd5, 0xdd, 0x8f, 0x1f, 0x4b, 0x1f, 0x6b, 0x1a,
	0xc0, 0xdd, 0xa8, 0x94, 0x1d, 0x01, 0x74, 0xf0, 0x61, 0x03, 0x33, 0x6e, 0xbd, 0x05, 0x37, 0x5a,
	0xac, 0xac, 0x4e, 0x09, 0xc3, 0xf0, 0x19, 0xd0, 0x65, 0x82, 0xac, 0x36, 0xaf, 0xe5, 0xc6, 0x0b,
	0x0b, 0x76, 0x57, 0xb5, 0x6c, 0x09, 0xdd, 0x1a, 0x39, 0xf9, 0x75, 0x27, 0xe3, 0x28, 0x98, 0xf5,
	0x59, 0x03, 0xb7, 0x45, 0x60, 0x07, 0x7b, 0x3e, 0xe3, 0x38, 0xc0, 0x95, 0x5d, 0xe9, 0xaf, 0x32,
	0xc3, 0x19, 0xa0, 0xd3, 0x77, 0x04, 0x07, 0x51, 0x8a, 0xe1, 0xdc, 0x98, 0xa3, 0x6e, 0x70, 0x11,
	0x5c, 0x2f, 0x53, 0x42, 0x70, 0x39, 0x52, 0xac, 0xe8, 0x57, 0xb2, 0x43, 0xf3, 0x5a, 0x6e, 0xcc,
	0xb9, 0x76, 0x61, 0xdc, 0xae, 0xc0, 0x17, 0x00, 0x5c, 0x74, 0x22, 0x3b, 0x2c, 0x38, 0x2e, 0xd9,
	0xb2, 0x6d, 0x76, 0xd4, 0x36, 0x5b, 0xb6, 0x5a, 0xb5, 0xcd, 0xde, 0x71, 0x3d, 0xac, 0x12, 0x3b,
	0x97, 0x90, 0xd6, 0x77, 0x0d, 0x98, 0xdd, 0x68, 0x2a, 0x29, 0x8a, 0x00, 0x06, 0xcd, 0x3f, 0x8b,
	0xaa, 0x68, 0xc1, 0x79, 0xbc, 0xb0, 0xda, 0x43, 0x96, 0xd6, 0x88, 0xa1, 0xd2, 0x67, 0x2a, 0x68,
	0x4f, 0x04, 0x5f, 0xb6, 0xd4, 0x32, 0x24, 0x6a, 0x59, 0x4e, 0xad, 0x45, 0xb2, 0x6b, 0x29, 0x66,
	0x13, 0xdc, 0xea, 0x50, 0x4b, 0x18, 0x0b, 0x3e, 0x0b, 0x46, 0x45, 0xa0, 0x48, 0xd3, 0xa8, 0xab,
	0x23, 0xce, 0x55, 0x71, 0xdf, 0xae, 0x58, 0x0d, 0x30, 0xd7, 0x19, 0xa9, 0x34, 0xd8, 0x03, 0x93,
	0x6d, 0x1a, 0x84, 0x6a, 0x30, 0x06, 0x50, 0xc0, 0x99, 0x68, 0xad, 0x3d, 0xb4, 0x1e, 0x80, 0x9b,
	0xe2, 0x10, 0x27, 0x6b, 0x1c, 0xf0, 0x3e, 0xc8, 0xee, 0x83, 0x6c, 0x12, 0xa5, 0x88, 0x3e, 0x05,
	0x7a, 0x20, 0x2c, 0x8a, 0xde, 0x52, 0x0f, 0x7a, 0x97, 0xf1, 0x0a, 0x65, 0x3d, 0x57, 0x42, 0xbc,
	0x76, 0x19, 0x77, 0x70, 0x8d, 0x72, 0xfc, 0x0a, 0xfb, 0x5e, 0xb5, 0x49, 0x2b, 0x31, 0x9c, 0x5a,
	0x72, 0x38, 0xad, 0x37, 0x6a, 0xf4, 0x93, 0x41, 0x14, 0xcb, 0x19, 0xa0, 0x57, 0x85, 0x45, 0x95,
	0xa6, 0x6e, 0xd0, 0x00, 0xa3, 0x01, 0x3e, 0xf2, 0x59, 0x3c, 0x07, 0x23, 0x4e, 0xf3, 0x5e, 0xf8,
	0xab, 0x83, 0x2b, 0x22, 0x2a, 0xfc, 0xa8, 0x01, 0x5d, 0xee, 0x1c, 0xcc, 0xa7, 0x95, 0xd7, 0xb2,
	0xec, 0x86, 0xdd, 0xaf, 0xbb, 0xe4, 0x69, 0xad, 0xbc, 0xff, 0xf1, 0xe7, 0xd3, 0xd0, 0x22, 0x5c,
	0x40, 0x69, 0xdf, 0x21, 0xf8, 0x4d, 0x03, 0x53, 0x89, 0x1d, 0x82, 0x9b, 0xe9, 0xf2, 0x77, 0xfe,
	0x3a, 0x18, 0x8f, 0xff, 0x03, 0xa9, 0x58, 0x6f, 0x08, 0xd6, 0x08, 0xe6, 0x7b, 0xb0, 0x4e, 0x6e,
	0x34, 0xfc, 0xaa, 0x81, 0x89, 0xb6, 0x89, 0x85, 0x0f, 0x07, 0x63, 0x11, 0xaf, 0x9a, 0xf1, 0x68,
	0x60, 0x9c, 0xe2, 0xbe, 0x2e, 0xb8, 0xe7, 0xe1, 0xbd, 0xfe, 0xb9, 0x87, 0xf0, 0x8b, 0x06, 0xc6,
	0x2f, 0x0d, 0x33, 0x2c, 0xa4, 0x65, 0x4f, 0xee, 0x9b, 0xb1, 0x3e, 0x10, 0x46, 0xb1, 0x45, 0x82,
	0xed, 0x0a, 0x5c, 0x46, 0x29, 0x4f, 0x6e, 0x51, 0xae, 0x57, 0xa4, 0xf1, 0x64, 0xfb, 0x56, 0xc0,
	0x54, 0xb1, 0xba, 0x2c, 0xa3, 0xb1, 0x39, 0x38, 0x50, 0x11, 0xbf, 0x2f, 0x88, 0xaf, 0xc2, 0x5c,
	0x4f, 0x99, 0x23, 0x60, 0x51, 0xae, 0xe6, 0xd6, 0xde, 0xc9, 0x99, 0xa9, 0x9d, 0x9e, 0x99, 0xda,
	0xef, 0x33, 0x53, 0xfb, 0x70, 0x6e, 0x66, 0x4e, 0xcf, 0xcd, 0xcc, 0xcf, 0x73, 0x33, 0xb3, 0xff,
	0xc4, 0xf3, 0x79, 0xb5, 0x51, 0xb2, 0xcb, 0xb4, 0x16, 0x47, 0xcb, 0xd3, 0xc0, 0x6b, 0x46, 0x3e,
	0xda, 0x40, 0xc7, 0x9d, 0xde, 0xe5, 0xb0, 0x8e, 0x59, 0x49, 0x17, 0x6f, 0xf3, 0xfa, 0xbf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x88, 0x8a, 0x1e, 0x01, 0xb4, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries the current parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries all the registered Interchain Queries in the module with filtration by owner and/or
	// connection ID.
	RegisteredQueries(ctx context.Context, in *QueryRegisteredQueriesRequest, opts ...grpc.CallOption) (*QueryRegisteredQueriesResponse, error)
	// Queries a registered Interchain Query by ID.
	RegisteredQuery(ctx context.Context, in *QueryRegisteredQueryRequest, opts ...grpc.CallOption) (*QueryRegisteredQueryResponse, error)
	// Queries the last successfully submitted result of an Interchain Query.
	QueryResult(ctx context.Context, in *QueryQueryResultRequest, opts ...grpc.CallOption) (*QueryQueryResultResponse, error)
	// Queries the last height of a remote chain known to the IBC client behind a given connection ID.
	LastRemoteHeight(ctx context.Context, in *QueryLastRemoteHeightRequest, opts ...grpc.CallOption) (*QueryLastRemoteHeightResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/neutron.interchainqueries.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredQueries(ctx context.Context, in *QueryRegisteredQueriesRequest, opts ...grpc.CallOption) (*QueryRegisteredQueriesResponse, error) {
	out := new(QueryRegisteredQueriesResponse)
	err := c.cc.Invoke(ctx, "/neutron.interchainqueries.Query/RegisteredQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredQuery(ctx context.Context, in *QueryRegisteredQueryRequest, opts ...grpc.CallOption) (*QueryRegisteredQueryResponse, error) {
	out := new(QueryRegisteredQueryResponse)
	err := c.cc.Invoke(ctx, "/neutron.interchainqueries.Query/RegisteredQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryResult(ctx context.Context, in *QueryQueryResultRequest, opts ...grpc.CallOption) (*QueryQueryResultResponse, error) {
	out := new(QueryQueryResultResponse)
	err := c.cc.Invoke(ctx, "/neutron.interchainqueries.Query/QueryResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastRemoteHeight(ctx context.Context, in *QueryLastRemoteHeightRequest, opts ...grpc.CallOption) (*QueryLastRemoteHeightResponse, error) {
	out := new(QueryLastRemoteHeightResponse)
	err := c.cc.Invoke(ctx, "/neutron.interchainqueries.Query/LastRemoteHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries the current parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries all the registered Interchain Queries in the module with filtration by owner and/or
	// connection ID.
	RegisteredQueries(context.Context, *QueryRegisteredQueriesRequest) (*QueryRegisteredQueriesResponse, error)
	// Queries a registered Interchain Query by ID.
	RegisteredQuery(context.Context, *QueryRegisteredQueryRequest) (*QueryRegisteredQueryResponse, error)
	// Queries the last successfully submitted result of an Interchain Query.
	QueryResult(context.Context, *QueryQueryResultRequest) (*QueryQueryResultResponse, error)
	// Queries the last height of a remote chain known to the IBC client behind a given connection ID.
	LastRemoteHeight(context.Context, *QueryLastRemoteHeightRequest) (*QueryLastRemoteHeightResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) RegisteredQueries(ctx context.Context, req *QueryRegisteredQueriesRequest) (*QueryRegisteredQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredQueries not implemented")
}
func (*UnimplementedQueryServer) RegisteredQuery(ctx context.Context, req *QueryRegisteredQueryRequest) (*QueryRegisteredQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredQuery not implemented")
}
func (*UnimplementedQueryServer) QueryResult(ctx context.Context, req *QueryQueryResultRequest) (*QueryQueryResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryResult not implemented")
}
func (*UnimplementedQueryServer) LastRemoteHeight(ctx context.Context, req *QueryLastRemoteHeightRequest) (*QueryLastRemoteHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastRemoteHeight not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.interchainqueries.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.interchainqueries.Query/RegisteredQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredQueries(ctx, req.(*QueryRegisteredQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.interchainqueries.Query/RegisteredQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredQuery(ctx, req.(*QueryRegisteredQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQueryResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.interchainqueries.Query/QueryResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryResult(ctx, req.(*QueryQueryResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastRemoteHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastRemoteHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastRemoteHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.interchainqueries.Query/LastRemoteHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastRemoteHeight(ctx, req.(*QueryLastRemoteHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "neutron.interchainqueries.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "RegisteredQueries",
			Handler:    _Query_RegisteredQueries_Handler,
		},
		{
			MethodName: "RegisteredQuery",
			Handler:    _Query_RegisteredQuery_Handler,
		},
		{
			MethodName: "QueryResult",
			Handler:    _Query_QueryResult_Handler,
		},
		{
			MethodName: "LastRemoteHeight",
			Handler:    _Query_LastRemoteHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "neutron/interchainqueries/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredQueriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredQueriesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredQueriesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owners) > 0 {
		for iNdEx := len(m.Owners) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Owners[iNdEx])
			copy(dAtA[i:], m.Owners[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Owners[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredQueriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredQueriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredQueriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegisteredQueries) > 0 {
		for iNdEx := len(m.RegisteredQueries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegisteredQueries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegisteredQuery != nil {
		{
			size, err := m.RegisteredQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQueryResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueryResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueryResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQueryResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueryResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueryResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastRemoteHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastRemoteHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastRemoteHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastRemoteHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastRemoteHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastRemoteHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Revision != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRegisteredQueriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Owners) > 0 {
		for _, s := range m.Owners {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredQueriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegisteredQueries) > 0 {
		for _, e := range m.RegisteredQueries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryId != 0 {
		n += 1 + sovQuery(uint64(m.QueryId))
	}
	return n
}

func (m *QueryRegisteredQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisteredQuery != nil {
		l = m.RegisteredQuery.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQueryResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryId != 0 {
		n += 1 + sovQuery(uint64(m.QueryId))
	}
	return n
}

func (m *QueryQueryResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastRemoteHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastRemoteHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Revision != 0 {
		n += 1 + sovQuery(uint64(m.Revision))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredQueriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredQueriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredQueriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owners = append(m.Owners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredQueriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredQueriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredQueriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredQueries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredQueries = append(m.RegisteredQueries, RegisteredQuery{})
			if err := m.RegisteredQueries[len(m.RegisteredQueries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisteredQuery == nil {
				m.RegisteredQuery = &RegisteredQuery{}
			}
			if err := m.RegisteredQuery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueryResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueryResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueryResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueryResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueryResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueryResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &QueryResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastRemoteHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastRemoteHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastRemoteHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastRemoteHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastRemoteHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastRemoteHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
